library(sf)
library(readxl)
library(RColorBrewer)
install.packages("readxl")
```

# Map from last time

Most of the process of this example the same as the last election maps that we made.

```{r}
map2020 <- st_zm(st_read("../data/PRECINCT2020_052219.shp"))
mapof2020 <- st_zm(st_read("../data/PRECINCT2020_052219.shp"))

results2020 <- read_excel("../data/G20_Official_Canvass.xlsx", 
resultsof2020 <- read_excel("../data/G20_Official_Canvass.xlsx", 
                       sheet = "Candidates",skip=1)

mapANDresults2020 <-
  left_join(map2020, results2020, by = c("PRECINCT" = "PRECINCT"))
  left_join(mapof2020, resultsof2020, by = c("PRECINCT" = "PRECINCT"))

mapANDresults2020 %>% 
  mutate(Biden.prop = `Biden & Harris  (Dem)`/( `Biden & Harris  (Dem)`+ `Trump & Pence       (Rep)`)) %>%


@@ -69,9 +69,38 @@ However, groups in the past have had more interesting ideas for this that have b
Assignment: \* Fill in the code to make a base/swing map relative to your candidate

```{r}
mapof2020 <- st_zm(st_read("../data/PRECINCT2020_052219.shp"))

results2020 <- read_excel("../data/P20_Official_Canvass.xlsx", 
                       sheet = "Dems",skip=2)


mapANDresults2020 <- left_join(map2020, results2020, by = c("PRECINCT" = "PRECINCT"))

mapANDresults2020 %>% 
  mutate(Pillich.prop = `Connie Pillich`/( `Connie Pillich`+ `Alicia Reece`)) %>%
  Category = case_when(
           Pillich.prop > 0.6 ~ "Base",
           Pillich.prop >= 0.4 & Pillich.prop <= 0.6 ~ "Swing",
           Pillich.prop < 0.4 ~ "Residual"
         )
  
  ggplot(mapANDresults2020, aes(fill = Category)) +
  geom_sf()+
   labs(
    title = "2020 Primary County Commissioner Election",
    subtitle = "Connie Pillich vs Alicia Reece",
    fill = "Category",
    caption = ""
  ) +
  scale_fill_manual(
    values = c("Base" = "blue", "Swing" = "yellow", "Residual" = "red"),
    na.value = "transparent")
```

history()
git status

It should look something like

![BaseSwingmap](../figs/Biden%20base-swing.png)
